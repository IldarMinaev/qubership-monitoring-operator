{{- if and .Values.install }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.name }}
    app.kubernetes.io/component: version-exporter
    app.kubernetes.io/part-of: monitoring
    app.kubernetes.io/instance: {{ template "version-exporter.instance" . }}
    app.kubernetes.io/version: {{ template "version-exporter.version" . }}
    {{- if .Values.labels }}
      {{ toYaml .Values.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.annotations }}
  annotations:
    {{ toYaml .Values.annotations | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        app.kubernetes.io/name: {{ .Values.name }}
        app.kubernetes.io/component: version-exporter
        app.kubernetes.io/part-of: monitoring
        app.kubernetes.io/instance: {{ template "version-exporter.instance" . }}
        app.kubernetes.io/version: {{ template "version-exporter.version" . }}
        app.kubernetes.io/managed-by: Helm
        {{- if .Values.labels }}
          {{ toYaml .Values.labels | nindent 8 }}
        {{- end }}
      {{- if .Values.annotations }}
      annotations:
      {{ toYaml .Values.annotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        {{ include "version-exporter.securityContext" . }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          {{- if .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          image: {{ template "version-exporter.image" . }}
          args:
            - "--config.file=/config/exporterConfig.yaml"
            - "--config.watch=/config"
          {{- if .Values.extraArgs }}
            {{- toYaml .Values.extraArgs | nindent 12 }}
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name: {{ .Values.service.portName }}
              containerPort: {{ .Values.containerPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: {{ .Values.service.portName }}
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: {{ .Values.service.portName }}
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            {{ include "versionExporter.resources" $ }}
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          projected:
            sources:
              {{- if .Values.extraVarsSecret }}
              - secret:
                  name: {{ .Values.secretName }}
              {{- end }}
              - configMap:
                  name: {{ .Values.name }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{ toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
{{- end }}
