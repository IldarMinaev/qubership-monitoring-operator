# Default values for cert-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Allow to enable deploy cert-exporter
# Type: boolean
# Mandatory: no
# Default: false
#
install: false

# A name of a microservice to deploy with.
# This name will be used as name of the microservice deployment and in labels.
name: cert-exporter

# Allows to create PodSecurityPolicy or SecurityContextConstraints.
# Type: boolean
# Mandatory: no
# Default: true
#
setupSecurityContext: true

# Allows to create Grafana dashboard for cert-exporter.
# Type: boolean
# Mandatory: no
# Default: true
#
setupGrafanaDashboard: true

# Allows to create Prometheus alerting rules for cert-exporter.
# Type: boolean
# Mandatory: no
# Default: true
#
setupAlertingRules: true

# Allows to mount additional directories or files from the host file system to container.
# You should use this option when the exporter needs to collect information from any certificates
# from files or kubeconfig except default ones.
# Type: list[object]
# Mandatory: no
# Default: []
#
additionalHostPathVolumes: []
  # Name of volume. Name must be unique.
  # Names reserved for default certificate volumes (shouldn't be used):
  # kube, openshift-origin, openshift-etcd, kubelet-pki, root-kube-config.
  # Type: string
  # Mandatory: yes
  #
  # - volumeName: example-name

  # Path to directory or file on the host system. Same path will be used in the container.
  # Type: string
  # Mandatory: yes
  #
  #   volumePath: /example/path

# Settings for parsing certificates from host file system.
# Type: object
# Mandatory: no
#
certsInFiles:
  # Enables parsing certificates from host file system.
  # If true, the part of the exporter will be deployed as a DaemonSet.
  # Type: boolean
  # Mandatory: no
  # Default: true
  #
  enabled: true

  # Allows to check internal certificates from default paths which is default for Kubernetes or Openshift clusters.
  # This option enables parsing certs by follow regexes:
  # For Kubernetes cluster: {/etc/kubernetes,/var/lib/kubelet/pki}/**/*.{crt,pem}
  # For Openshift cluster: /etc/{etcd,origin}/**/*.{crt,pem}
  # Also mounts volumes with follow names and paths (name - path):
  # For Kubernetes: kube - /etc/kubernetes, kubelet-pki - /var/lib/kubelet/pki
  # For Openshift: openshift-origin - /etc/origin, openshift-etcd - /etc/etcd
  # Type: boolean
  # Mandatory: no
  # Default: true
  #
  defaultCerts: true

  # Allows to check certificates with custom regex.
  # Please note that in order to check custom paths,
  # you should mount them as volumes in the certExporter.additionalHostPathVolumes.
  # Ref for regex format explaining: https://github.com/bmatcuk/doublestar#usage
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  includeCerts: ""

  # Allows to check only certificates that NOT match regex.
  # Ref for regex format explaining: https://github.com/bmatcuk/doublestar#usage
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  excludeCerts: ""

# Settings for parsing certificates from Kubeconfig files on the host file system.
# Type: object
# Mandatory: no
#
certsInKubeconfig:
  # Enables parsing certificates from Kubeconfig.
  # If true, the part of the exporter will be deployed as a DaemonSet.
  # Type: boolean
  # Mandatory: no
  # Default: false
  #
  enabled: false

  # Allows to check Kubeconfig files from default paths on Kubernetes or Openshift clusters.
  # This option enables parsing certs by follow regexes:
  # For Kubernetes cluster: {/etc/kubernetes/**/*.conf,/root/.kube/config}
  # For Openshift cluster: {/etc/origin/**/*.kubeconfig,/root/.kube/config}
  # Also mounts volumes with follow names and paths (name - path):
  # For Kubernetes: kube - /etc/kubernetes, root-kube-config - /root/.kube/config
  # For Openshift: openshift-origin - /etc/origin, root-kube-config - /root/.kube/config
  # Type: boolean
  # Mandatory: no
  # Default: true
  #
  defaultCerts: true

  # Allows to check Kubeconfig files with custom regex.
  # Please note that in order to check custom paths,
  # you should mount them as volumes in the certExporter.additionalHostPathVolumes.
  # Ref for regex format explaining: https://github.com/bmatcuk/doublestar#usage
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  includeCerts: ""

  # Allows to check only Kubeconfig files that NOT match regex.
  # Ref for regex format explaining: https://github.com/bmatcuk/doublestar#usage
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  excludeCerts: ""

# Settings for parsing certificates from Kubernetes secrets.
# Type: object
# Mandatory: no
#
certsInSecrets:
  # Enables parsing certificates from Kubernetes secrets.
  # If true, the part of the exporter will be deployed as a Deployment.
  # Type: boolean
  # Mandatory: no
  # Default: true
  #
  enabled: true

  # Allows to check fields in the secrets with keys that match regex.
  # Type: string
  # Mandatory: no
  # Default: "*.crt"
  #
  includeCerts: "*.crt"

  # Allows to check only fields in the secrets with keys NOT match regex.
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  excludeCerts: ""

  # Allows to match secrets by annotation.
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  annotationSelector: ""

  # Allows to match secrets by label.
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  labelSelector: ""

  ## DEPRECATED. Use `namespaces` instead of `namespace`.
  # Allows find secrets only in the selected namespace.
  # Please note that parameter allows select only one namespace.
  # Empty string means that exporter will check all available namespaces.(if parameter `namespaces` not set)
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  namespace: ""

  # Allows find secrets in the selected namespaces.
  # Empty string means that exporter will check all available namespaces.(if parameter `namespace` not set )
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  namespaces: ""

  # Allows to select only specific a secret type.
  # Empty list means that exporter will check all available secrets.
  # Type: list[string]
  # Mandatory: no
  # Default: []
  #
  types: []

  # Allows to specify path to kubeconfig file for getting access to secrets via kubectl.
  # Only required if out-of-cluster installation.
  # Type: string
  # Mandatory: no
  # Default: ""
  #
  kubeconfigPath: ""

# Periodic interval in which to check certs.
# Format: time.Duration from GoLang (https://golang.org/pkg/time/#ParseDuration)
# Type: string
# Mandatory: no
# Default: 1h0m0s
#
pollingPeriod: 1h0m0s

# A Docker image to deploy the cert-exporter.
# image: joeelliott/cert-exporter:v2.11.0

# Service monitor for pulling metrics.
# Type: object
# Mandatory: no
#
serviceMonitor:
  # Install serviceMonitor.
  # Type: boolean
  # Mandatory: no
  #
  install: true

  # Allow change metrics scrape interval.
  # Type: string
  # Mandatory: no
  #
  interval: 2m

  # Allow change metrics scrape timeout
  # Type: string
  # Mandatory: no
  #
  # Please note that scrapeTimeout must be less the interval
  scrapeTimeout: 1m

# Port for cert-exporter service.
# Type: integer
# Mandatory: no
# Default: 9219
#
servicePort: 9219

# Pod-specific settings for cert-exporter as a daemonset. Works if collecting from files and/or kubeconfig is enabled.
# Type: object
# Mandatory: no
#
daemonset:
  # The resources describes the compute resource requests and limits for single Pod.
  # Affects daemonset pods which are deploying if certs collecting from files and/or kubeconfig is enabled.
  # Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  # Type: object
  # Mandatory: no
  #
  resources: {}
  #   limits:
  #     cpu: 20m
  #     memory: 50Mi
  #   requests:
  #     cpu: 10m
  #     memory: 25Mi

  # Additional arguments for cert-exporter containers from daemonset.
  # Type: list[string]
  # Mandatory: no
  # Default: []
  #
  extraArgs: []

  # SecurityContext holds pod-level security attributes.
  # The parameters are required if a Pod Security Policy is enabled
  # for Kubernetes cluster and required if a Security Context Constraints is enabled
  # for Openshift cluster.
  # Type: object
  # Mandatory: no
  #
  # securityContext:
    # The UID to run the entrypoint of the container process.
    # Defaults to user specified in image metadata if unspecified.
    # Type: integer
    # Mandatory: no
    #
    # runAsUser: 2000

    # A special supplemental group that applies to all containers in a pod.
    # Some volume types allow the Kubelet to change the ownership of that volume
    # to be owned by the pod:
    #   1. The owning GID will be the FSGroup
    #   2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
    #   3. The permission bits are OR'd with rw-rw----
    # If unset, the Kubelet will not modify the ownership and permissions of any volume.
    # Type: integer
    # Mandatory: no
    #
    # fsGroup: 2000

  # Tolerations allow the pods to schedule onto nodes with matching taints.
  # Default tolerations "operator: Exists" for installing on master nodes
  # Type: object
  # Mandatory: no
  #
  tolerations:
    - operator: Exists

  # Allow define which Nodes the Pods are scheduled on.
  # Type: map[string]
  # Mandatory: no
  # Default: not set
  #
  # nodeSelector: {}

  # If specified, the pod's scheduling constraints
  # More info: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#affinity-v1-core
  # Type: object
  # Mandatory: no
  # Default: not set
  #
  affinity: {}

  # Annotations is an unstructured key value map stored
  # with a resource that may be set by external tools to store and retrieve arbitrary metadata.
  # They are not queryable and should be preserved when modifying objects.
  # More info: https://kubernetes.io/docs/user-guide/annotations
  # Type: map[string]string
  # Mandatory: no
  # Default: not set
  #
  annotations: {}
  #  annotation-key: annotation-value

  # Map of string keys and values that can be used to organize and categorize (scope and select) objects.
  # May match selectors of replication controllers and services.
  # More info: https://kubernetes.io/docs/user-guide/labels
  # Type: map[string]string
  # Mandatory: no
  # Default: not set
  #
  labels: {}
  #  label-key: label-value

  # PriorityClassName assigned to the Pods to prevent them from evicting.
  # Type: string
  # priorityClassName: "priorityClassName"

# Pod-specific settings for cert-exporter as a deployment. Works if collecting from secrets is enabled.
# Type: object
# Mandatory: no
#
deployment:
  # The resources describes the compute resource requests and limits for single Pod.
  # Affects deployment pod which is deploying if certs collecting from secrets is enabled.
  # Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  # Type: object
  # Mandatory: no
  #
  resources: {}
  #   limits:
  #     cpu: 20m
  #     memory: 150Mi
  #   requests:
  #     cpu: 10m
  #     memory: 50Mi

  # Additional arguments for cert-exporter containers from deployment.
  # Type: list[string]
  # Mandatory: no
  # Default: []
  #
  extraArgs: []
    # - '--secrets-include-glob=*.cer'

  # SecurityContext holds pod-level security attributes.
  # Type: object
  # Mandatory: no
  #
  # securityContext:
    # The UID to run the entrypoint of the container process.
    # Defaults to user specified in image metadata if unspecified.
    # Type: integer
    # Mandatory: no
    #
    # runAsUser: 2000

    # A special supplemental group that applies to all containers in a pod.
    # Some volume types allow the Kubelet to change the ownership of that volume
    # to be owned by the pod:
    #   1. The owning GID will be the FSGroup
    #   2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
    #   3. The permission bits are OR'd with rw-rw----
    # If unset, the Kubelet will not modify the ownership and permissions of any volume.
    # Type: integer
    # Mandatory: no
    #
    # fsGroup: 2000

  # Tolerations allow the pods to schedule onto nodes with matching taints.
  # Type: object
  # Mandatory: no
  #
  tolerations: []

  # Allow define which Nodes the Pods are scheduled on.
  # Type: map[string]
  # Mandatory: no
  # Default: not set
  #
  # nodeSelector: {}

  # If specified, the pod's scheduling constraints
  # More info: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#affinity-v1-core
  # Type: object
  # Mandatory: no
  # Default: not set
  #
  affinity: {}

  # Annotations is an unstructured key value map stored
  # with a resource that may be set by external tools to store and retrieve arbitrary metadata.
  # They are not queryable and should be preserved when modifying objects.
  # More info: https://kubernetes.io/docs/user-guide/annotations
  # Type: map[string]string
  # Mandatory: no
  # Default: not set
  #
  annotations: {}
  #  annotation-key: annotation-value

  # Map of string keys and values that can be used to organize and categorize (scope and select) objects.
  # May match selectors of replication controllers and services.
  # More info: https://kubernetes.io/docs/user-guide/labels
  # Type: map[string]string
  # Mandatory: no
  # Default: not set
  #
  labels: {}
  #  label-key: label-value

  # PriorityClassName assigned to the Pods to prevent them from evicting.
  # Type: string
  # priorityClassName: "priorityClassName"
